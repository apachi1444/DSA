it's like a box which contains the object that we are looking for 
or an empty box

// means that this object the box can contain null object

return Optional.ofNullable(cat);

// means that this box can only contain non null object!

return Optional.of(cat);

Optional.empty();

// in the main method
Optional<Cat> optionalCat = findByName();

if ( optional.isPresent() ) {
	sout(optionalCat.get().getAge());
}



// this is the professional way

// if we can't find that cat we will create a cat by default !
// or Else return the value inside of that box optional 
Cat myCat = optionalCat.orElse(new Cat("UNKNOW" , 15));



----------------------------
to create an optional we must use these three methods !
- of
- empty 
- ofNullable ( it allows us to use an empty value in the optional )

isPresent() : checks whether the optional is not empty or not !
orElse("") : will return a default value if he didn't find nothing 
in the optional i mean if the optional is empty 

-----------------------------------
we can use the supplier interface in the orElseGet() method of the optional
and we know that the supplier only returs to us a return type without
getting an input

System.out.println(optional.map(String::toUpperCase)
			   .orElseGet(() -> "default email"))


